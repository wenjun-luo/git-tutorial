C51 COMPILER V9.59.0.0   PROJECT                                                           01/07/2025 13:17:26 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE PROJECT
OBJECT MODULE PLACED IN .\Objects\project.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE User\project.c LARGE OMF2 OPTIMIZE(0,SPEED) BROWSE INCDIR(.\H;.\User;.\T
                    -KDriver\C) DEBUG PRINT(.\Listings\project.lst) OBJECT(.\Objects\project.obj)

line level    source

   1          #include "project.h"
   2          
   3          extern TagRingBuffer g_comunicate_rb;
   4          uint32_t  exKeyValueFlag;
   5          uint8_t Uart1_RxData[UART_RECV_TOTALLEN] = {0};   //接收数据数组
   6          bit ChangeFlag = 0;    
   7          bit BreatheLED = 0;   //呼吸灯标志位
   8          
   9          
  10          //接收数据 控制LED状态
  11          uint8_t handle_tft2mcu_data(uint8_t *buf) {
  12   1      
  13   1          if ((buf[4] & 0x0F) == 0x00) {
  14   2              PWMDTY1 = 0x00;  //全灭
  15   2                      BreatheLED = 0;
  16   2          } else if ((buf[4] & 0x0F) == 0x01) {
  17   2              PWMDTY1 = 0x64;  //全亮
  18   2                      BreatheLED = 0;
  19   2          } else if ((buf[4] & 0x0F) == 0x02) {
  20   2              BreatheLED = 1;   //呼吸灯标志位
  21   2          }  
  22   1              
  23   1          return 0;
  24   1      }
  25          //发送数据帧检验码处理
  26          u8 handle_mcu2tft_data(uint8_t *buf, int len)
  27          {
  28   1          u8 i, sum = 0;
  29   1      
  30   1          for (i = 1; i < len - 1 ; i++)
  31   1          {
  32   2              sum += buf[i];
  33   2          }
  34   1          return (0x100 - sum ); //返回校验值
  35   1               
  36   1      }
  37          //接收数据帧校验码处理
  38          u8 handle_tft2mcu_datacheck(uint8_t *buf, int len)
  39          {
  40   1          u8 i, sum = 0;
  41   1      
  42   1          for (i = 1; i < len - 1 ; i++)
  43   1          {
  44   2              sum += buf[i];
  45   2          }
  46   1          return ((0x200 - sum) & 0xFF); //返回校验值
  47   1               
  48   1      }
  49          
  50          uint8_t Uart1_TxData[UART_SEND_TOTALLEN] = {0xAA,0x88,0x07}; //要发送的数据帧
  51          uint8_t SwitchFlag = 0;                     //开关输出数据
  52          uint8_t RadarFlag = 0;                      //雷达输出数据
  53          //发送数据帧处理
  54          void loop_write_comunicate_data(void)
C51 COMPILER V9.59.0.0   PROJECT                                                           01/07/2025 13:17:26 PAGE 2   

  55          {
  56   1          Uart1_TxData[UART_SEND_BYTE0] = SEND_HANDER1;
  57   1              Uart1_TxData[UART_SEND_BYTE1] = SEND_HANDER2;
  58   1              Uart1_TxData[UART_SEND_BYTE2] = UART_SEND_TOTALLEN;
  59   1              Uart1_TxData[UART_SEND_BYTE3] =  ((Uart1_TxData[UART_SEND_BYTE3] &0xfe)| RadarFlag);
  60   1              Uart1_TxData[UART_SEND_BYTE4] =  ((Uart1_TxData[UART_SEND_BYTE4] &0xfe)| SwitchFlag);
  61   1              Uart1_TxData[UART_SEND_CHECK] =  handle_mcu2tft_data(Uart1_TxData,Uart1_TxData[UART_SEND_BYTE2]);
  62   1            
  63   1      }
  64          
  65          //接收数据帧处理
  66          void loop_recv_comunicate_data(uint8_t *com_data)
  67          {
  68   1          static uint8_t byte_index = 0;
  69   1          while (ringBuffer_pop(&g_comunicate_rb, com_data+byte_index))
  70   1          {           
  71   2              //com_data[byte_index] = ch;
  72   2              switch (byte_index){
  73   3              case 0:
  74   3                              if (com_data[byte_index] == RECV_HANDER1){                              
  75   4                      byte_index++;                           
  76   4                  }else{   
  77   4                                      byte_index = 0;
  78   4                              }
  79   3                  break;
  80   3                      case 1:
  81   3                              if (com_data[byte_index] == RECV_HANDER2){            
  82   4                      byte_index++;
  83   4                  }else{                              
  84   4                                      byte_index = 0;
  85   4                              }
  86   3                              break;
  87   3              case 2:
  88   3                              if (com_data[byte_index] == UART_RECV_TOTALLEN){             
  89   4                      byte_index++;                   
  90   4                  }else{    
  91   4                                      byte_index = 0;
  92   4                              }
  93   3                  break;
  94   3              default:
  95   3                  byte_index++;
  96   3                  if (byte_index >= com_data[UART_RECV_BYTE2] || byte_index > UART_RECV_TOTALLEN){                    
  97   4                     // handle_tft2mcu_data(com_data,byte_index); // 处理接收数据
  98   4                                      if(handle_tft2mcu_datacheck(com_data,com_data[UART_RECV_BYTE2]) == com_data[byte_index - 1]){
  99   5                                              handle_tft2mcu_data(com_data);  //处理数据
 100   5                                      }
 101   4                      byte_index = 0;
 102   4                  }
 103   3                  break;
 104   3              }
 105   2          }
 106   1      }
 107          
 108          //雷达检测
 109          void Radar_work(void)
 110          {
 111   1                      RadarFlag = Radar_Ischeck();
 112   1                      if( RadarFlag)
 113   1                      {
 114   2                              RadarFlag = 0x01;
 115   2                      }
 116   1                      else
C51 COMPILER V9.59.0.0   PROJECT                                                           01/07/2025 13:17:26 PAGE 3   

 117   1                              RadarFlag = 0x00;
 118   1      }
 119          
 120          void project(void)
 121          {        
 122   1                  
 123   1                   if(SOCAPI_TouchKeyStatus & 0x80)
 124   1              {
 125   2                  SOCAPI_TouchKeyStatus &= 0x7f;
 126   2                  exKeyValueFlag = TouchKeyScan();
 127   2                              if(exKeyValueFlag & (1L << 0))
 128   2                  {            
 129   3                                      ChangeFlag = 1;
 130   3                  }
 131   2                              else
 132   2                              {
 133   3                                      if(ChangeFlag == 1)
 134   3                                 {
 135   4                                              ChangeFlag = 0;
 136   4                                              SwitchFlag = (SwitchFlag == 0x01) ? 0x00 : 0x01;
 137   4                                 }
 138   3      
 139   3                              }
 140   2                              loop_write_comunicate_data();         //写入数据
 141   2                              loop_recv_comunicate_data(Uart1_RxData); //接收数据
 142   2                              Radar_work();                         //雷达检测
 143   2                              if(is_200ms_tick(1))
 144   2                              {
 145   3                                      UART_Sendstring(Uart1_TxData);   //发送数据
 146   3                              }
 147   2                              //呼吸灯                
 148   2                              if(BreatheLED)
 149   2                                      PWMDTY1_Set();
 150   2                  TouchKeyRestart();          
 151   2                              
 152   2              }
 153   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1042    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     41    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
