C51 COMPILER V9.59.0.0   RINGBUFFER_C51                                                    01/04/2025 11:59:30 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE RINGBUFFER_C51
OBJECT MODULE PLACED IN .\Objects\RingBuffer_C51.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE User\RingBuffer_C51.c LARGE OMF2 OPTIMIZE(0,SPEED) BROWSE INCDIR(.\H;.\U
                    -ser;.\TKDriver\C) DEBUG PRINT(.\Listings\RingBuffer_C51.lst) OBJECT(.\Objects\RingBuffer_C51.obj)

line level    source

   1          //#include <stdio.h>
   2          //#include <stdlib.h>
   3          #include "H/RingBuffer_C51.H"
   4          #include "H/SC92F841x_C.H"
   5          
   6          void ringBuffer_init(TagRingBuffer *rb, int size1, char *new_buffer)
   7          {
   8   1              // Note: (size-1) is full!!
   9   1              if (rb == NULL)
  10   1              {
  11   2                      return;
  12   2              }
  13   1              rb->buffer = new_buffer;
  14   1              if (rb->buffer == NULL)
  15   1              {
  16   2                      return;
  17   2              }
  18   1              rb->maxCount = size1;
  19   1              rb->wrPos = 0;
  20   1              rb->rdPos = 0;
  21   1              rb->remainCnt = 0;
  22   1              return;
  23   1      }
  24           
  25          void ringBuffer_free(TagRingBuffer *rb)
  26          {
  27   1              if (rb)
  28   1              {
  29   2                      if (rb->buffer)
  30   2                      {
  31   3                              free(rb->buffer);
  32   3                      }
  33   2                      free(rb);
  34   2              }
  35   1      }
  36           
  37          int is_ringBuffer_full(TagRingBuffer *rb)
  38          {
  39   1              // Note:(MAXCOUNT-1) is full!!
  40   1              if (((rb->wrPos) + 1) % (rb->maxCount) == rb->rdPos)
  41   1                      return 1;
  42   1       
  43   1              return 0;
  44   1      }
  45           
  46          int is_ringBuffer_empty(TagRingBuffer *rb)
  47          {
  48   1              if ((rb->wrPos) == rb->rdPos)
  49   1              {
  50   2                      //rb->wrPos = 0;
  51   2                      //rb->rdPos = 0;
  52   2                      return 1;
  53   2              }
  54   1              
C51 COMPILER V9.59.0.0   RINGBUFFER_C51                                                    01/04/2025 11:59:30 PAGE 2   

  55   1              return 0;
  56   1      }
  57           
  58          int ringBuffer_pop(TagRingBuffer *rb, char *ch)
  59          { // read
  60   1              if (is_ringBuffer_empty(rb))
  61   1              {
  62   2                      return 0;
  63   2              }
  64   1              *ch = rb->buffer[rb->rdPos];
  65   1              rb->rdPos = (rb->rdPos + 1) % rb->maxCount;
  66   1              rb->remainCnt--;
  67   1              return 1;
  68   1      }
  69           
  70          int ringBuffer_push(TagRingBuffer *rb, char ch)
  71          { // write
  72   1              if (is_ringBuffer_full(rb))
  73   1              {
  74   2                      return 0;
  75   2              }
  76   1              rb->buffer[rb->wrPos] = ch;
  77   1              rb->wrPos = (rb->wrPos + 1) % (rb->maxCount);
  78   1              rb->remainCnt++;
  79   1      
  80   1              return 1;
  81   1      }
  82           
  83          int ringBuffer_getRemainCnt(TagRingBuffer *rb)
  84          {
  85   1              return rb->remainCnt;
  86   1      }
  87           
  88          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    979    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     30    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
