C51 COMPILER V9.59.0.0   TKDRIVER                                                          01/04/2025 11:59:30 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE TKDRIVER
OBJECT MODULE PLACED IN .\Objects\TKDriver.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE User\TKDriver.C LARGE OMF2 OPTIMIZE(0,SPEED) BROWSE INCDIR(.\H;.\User;.\
                    -TKDriver\C) DEBUG PRINT(.\Listings\TKDriver.lst) OBJECT(.\Objects\TKDriver.obj)

line level    source

   1          //*************************************************************************************************
   2          //  Copyright (c)       ÉîÛÚÊÐÈüÔªÎ¢µç×ÓÓÐÏÞ¹«Ë¾
   3          //      ÎÄ¼þÃû³Æ        :  S_TouchKeyCFG.c
   4          //      ×÷Õß            : 
   5          //      Ä£¿é¹¦ÄÜ        :  ´¥¿Ø¼ü´úÂë³ÌÐò
   6          //      °æ±¾            :
   7          //      ¸ü¸Ä¼ÇÂ¼        :
   8          //      ×¢ÒâÊÂÏî        :  ÓÃ»§ÐèÒªÅäÖÃµÄÎÄ¼þÔÚS_TouchKeyCFG.hÖÐ
   9          //  ¿â°æ±¾±ê¼Ç  : 
  10          //************************************************************************************************
  11          #include "S_TouchKeyCFG.h"
  12          #include "TKDriver.h"
  13          #include "stdio.h"
  14          //*************************************************************************************
  15          //              844 ¼Ä´æÆ÷¶¨Òå
  16          //*************************************************************************************
  17          /*PSW*/
  18          sfr     TK_PSW      =   0xD0;   //³ÌÐò×´Ì¬×Ö
  19          sbit    TK_CY           =       TK_PSW^7;       //½øÎ»  
  20          
  21          //===========================================================================
  22          //È«¾Ö±äÁ¿¶¨Òå
  23          unsigned        char    xdata           SOCAPI_TouchKeyStatus;                                  //API½Ó¿Ú×´Ì¬£ºbit7-Ò»ÂÖÉ¨ÃèÍê³É±êÖ¾  1:Íê³É    0£ºÎ´Íê³É
  24                                                                                                                                                      //                     bit6-Í¨µÀ´¥Ãþ¼ÆÊýÒç³ö±êÖ¾ 1:Òç³ö      0:Î´Òç³ö
  25          //===============================================================================
  26          //È«¾Ö±äÁ¿ÉùÃ÷£º¸ÃÇøÓò²»¿ÉÐÞ¸Ä
  27          unsigned        int     xdata           RawData [SOCAPI_SET_TOUCHKEY_TOTAL];                    
  28          unsigned        int             xdata           BaseLine[SOCAPI_SET_TOUCHKEY_TOTAL];
  29          unsigned    int         xdata           FilterData[SOCAPI_SET_TOUCHKEY_TOTAL];
  30                                                                                                          
  31          unsigned        char    xdata           RestAreaCnt[SOCAPI_SET_TOUCHKEY_TOTAL];                         
  32          unsigned        char    xdata           TouchCnt[SOCAPI_SET_TOUCHKEY_TOTAL];                            
  33          unsigned        char    xdata           NoTouchCnt[SOCAPI_SET_TOUCHKEY_TOTAL];  
  34                                  
  35          unsigned        char    xdata           CurrentChannel[SOCAPI_SET_TOUCHKEY_TOTAL];      
  36                                                       
  37          unsigned    char    xdata           LowFingerDataCnt[SOCAPI_SET_TOUCHKEY_TOTAL];
  38          
  39          unsigned        char    xdata           FloatAreaCnt[SOCAPI_SET_TOUCHKEY_TOTAL]; 
  40          
  41          unsigned        char    xdata           BaseLineAdjusttmp[SOCAPI_SET_TOUCHKEY_TOTAL];   
  42          
  43          int                 xdata           DifferAccum[SOCAPI_SET_TOUCHKEY_TOTAL]; 
  44          char                xdata               SetNoiseThreshold;
  45          
  46          unsigned        char    xdata           ConfirmTouchCnt;
  47          unsigned        char    xdata           MultipleDealTpye = 0; 
  48          
  49          //×Ô¶¨Òå±äÁ¿
  50          unsigned        int     xdata       UpdateBaseLNum;                                             // µ¥¼ü³¤°´¼ÆÊýÆ÷
  51          unsigned        int     xdata       MultipleLNum;                                               // ¶à°´¼ü¸ÉÈÅ¼ÆÊý
  52          
  53          //Íâ²¿±äÁ¿½Ó¿Ú
  54          extern  unsigned        char    data            CurrentChannelMax;              //µ±Ç°Ñ¡ÖÐµÄkeysensorµÄ¸öÊý
C51 COMPILER V9.59.0.0   TKDRIVER                                                          01/04/2025 11:59:30 PAGE 2   

  55          extern  bit  bMultiple; //¶à°´¼ü±êÖ¾    
  56          extern  bit  GetIsNeedUpdateBaseline(void);
  57          extern  void SetNeedUpdateBaseline(void);
  58          extern  unsigned long int SensorKeyFlag(void);
  59          extern  void MultipleDeal(unsigned char CycleCnt);
  60          extern  void TouchKey_Service(void);
  61          
  62          /*******************************¿âº¯Êý»ù´¡ÉèÖÃ£¬Ò»°ã²»ÐèÒª¸ü¸Ä***************************************/
  63          #define         SOCAPI_CFG_CYCLE_CNT                                        32          //È¡Öµ·¶Î§10-255£¬´¥¿Ø³õÊ¼»¯Êý¾ÝÂË³ö´ÎÊý£¬ÒÔ¼°ÐÞÕýÖµ³õÊ¼»¯ÐÞÕý´
             -ÎÊý£¬Ä¬ÈÏ32£¬È¡ÖµÔ½´ó´¥¿Ø³õÊ¼»¯Ê±¼äÔ½³¤£¬´¥¿ØÊý¾ÝÔ½ÎÈ¶¨  
  64          #define         SOCAPI_CFG_OVERLOW_MAX_COUNT                        10          //µÍ»ùÏß¸üÐÂËÙ¶ÈÉèÖÃ£¬´ú±í·¢ÉúµÍ»ùÏßºó£¬¶àÉÙÂÖ¸üÐÂÒ»´Î»ùÏß
             -£¬¸üÐÂ²½½ønoise/2£¬ÖµÔ½Ð¡»ùÏß¸üÐÂËÙ¶ÈÔ½¿ì
  65          #define         SOCAPI_CFG_RESET_BASELINE_CNT                       10          //µÍ»ùÏß¸üÐÂ¶àÉÙ´Îºó£¬Èç¹û»¹´¦ÓÚµÍ»ùÏß×´Ì¬£¬Ö±½ÓÇ¿ÖÆ¸üÐÂ
             -»ùÏß£¬ÖµÔ½Ð¡»ùÏß¸üÐÂËÙ¶ÈÔ½¿ì
  66                                                                                                                                          //SOCAPI_CFG_OVERLOW_MAX_COUNTºÍSOCAPI_CFG_RESET_BASELINE_CNTµÄÈ¡Öµ³Ë»ý²»ÄÜ´óÓÚ255
  67          /***************************************************************************************/
  68          
  69          /***************µ¯»É¿â¶ÀÓÐ***************/
  70          #define         SOCAPI_SET_CS_FUNCTION                                          1               //0:±íÊ¾²»½øÐÐCS²âÊÔ,1: ±íÊ¾½øÐÐCS²âÊÔ,Ä¬ÈÏ0
  71          #define         SOCAPI_INHIBITION_ZONE                                      8           //ÒÖÖÆÇø¼ä%£¬ÉèÖÃ·¶Î§5-10£¬Ä¬ÈÏ7,¼´£¨7*10£©%=70% £¬Á¬Ë®Ê±¼Ó´ó¸Ã
             -²ÎÊý,¶Ô½²»úÉèÖÃÐ¡
  72          #define         SOCAPI_MAX_KEY_MUTIPLE                                          300             //¶àÉÙ´Î¸ÉÈÅ¸üÐÂ»ùÏß£¬Ä¬ÈÏ300*5=1500
  73          #define         SOCAPI_MAX_KEY_NUM_INVALID                                      3               //Ç¿ÖÆ¸üÐÂ»ùÏß°´¼üÏÞÖÆ¸öÊý£¬Ä¬ÈÏ3
  74          /****************************************/
  75          
  76          #define         AppType                                         0
  77          #define         IsDoubleKey                                             1                         // 0 µ¯»É 1 ¸ô¿Õ
  78          #define         AirSeparationDistance               2                    //0 µ¥°´¼ü  1 Ë«°´¼ü
  79          #define         CONFIRMTOUCHCNT                 3                        //°´¼üÈ·ÈÏ´ÎÊý
  80          #define         INIT_AUTO_UPDATE_TIME               4
  81          #define         SET_KEY_CONTI_TIME              5                        //°´¼ü×î³¤Êä³ö
  82          #define         SET_SYNC_UPDATE                                 6
  83          #define         SET_UPDATE_SPEED                                7       
  84          #define         AUTO_UPDATE_TIME                    8
  85          #define         FilteredKValue                                  9
  86          #define         SET_ANTIJAM                                     10
  87          #define         BAUD                                    11
  88          #define         DwellTime                                       12
  89          #define         SaveTime                                            13
  90          #define         NOISE                           16
  91          
  92          #define         SET_TOUCH_FREQ                                  0
  93          #define         SET_RESOLUTION                                  1
  94          #define         SET_GAIN_CFG                                    2
  95          #define         SCANTIME                                                3
  96          #define         SET_ICHA                                                4
  97          #define         FINGER_THRESHOLD_H                          6
  98          #define         FINGER_THRESHOLD_L                          7
  99          
 100          //**********************************************************************************    
 101          //                                                              ºê¶¨Òå½Ó¿Úµ÷ÓÃ²¿·Ö                                                                //
 102          //**********************************************************************************
 103          unsigned        char    code        CFG_OVERLOW_MAX_COUNT = SOCAPI_CFG_OVERLOW_MAX_COUNT;
 104          unsigned        char    code        CFG_RESET_BASELINE_CNT = SOCAPI_CFG_RESET_BASELINE_CNT;     
 105          unsigned        char    code        CFG_CYCLE_CNT = SOCAPI_CFG_CYCLE_CNT;
 106          
 107          //**********************************************************************************    
 108          //                                                              º¯Êý½Ó¿Úµ÷ÓÃ²¿·Ö                                                                  //
 109          //**********************************************************************************
 110          /**************************************************
 111          *º¯ÊýÃû³Æ£ºunsigned int SetOneKeyPushResetTime(void) 
 112          *º¯Êý¹¦ÄÜ£º°´¼ü×î³¤µÄÊä³öÊ±¼ä
C51 COMPILER V9.59.0.0   TKDRIVER                                                          01/04/2025 11:59:30 PAGE 3   

 113          *Èë¿Ú²ÎÊý£ºvoid
 114          *³ö¿Ú²ÎÊý£ºunsigned int SOCAPI_SET_KEY_CONTI_TIME
 115          *±¸×¢    £ºÕâ¸ö·µ»ØÖµµÄÉèÖÃ£¬ ÊÇ¸ù¾ÝÓÐ¶à³¤Ê±¼äÆô¶¯TouchKeyRestart£¨£©Ò»´Î
 116          ÀýÈç10ms Æô¶¯Ò»´Î£¬ ÄÇSOCAPI_SET_KEY_CONTI_TIME*10ms£¬³¬¹ýÊ±¼äºó´Ë°´¼üÎÞÐ§¡£
 117          **************************************************/
 118          unsigned int SetOneKeyPushResetTime(void)   
 119          {         
 120   1              return  TKCFG[SET_KEY_CONTI_TIME];
 121   1      }
 122          /**************************************************
 123          *º¯ÊýÃû³Æ£ºint  GetBaselineUpdateThreshold(void)
 124          *º¯Êý¹¦ÄÜ£º¸üÐÂËÙ¶È 
 125          *Èë¿Ú²ÎÊý£ºvoid
 126          *³ö¿Ú²ÎÊý£ºint 
 127          *±¸×¢    £º
 128          **************************************************/
 129          int  GetBaselineUpdateThreshold(void)
 130          {
 131   1              return TKCFG[SET_UPDATE_SPEED]; 
 132   1      }
 133          
 134          /**************************************************
 135          *º¯ÊýÃû³Æ£ºunsigned char GetInitAutoUpdateTime(void)
 136          *º¯Êý¹¦ÄÜ£º³õÊ¼»¯×Ô¶¯Ð£×¼´ÎÊý
 137          *Èë¿Ú²ÎÊý£ºvoid
 138          *³ö¿Ú²ÎÊý£ºunsigned  char 
 139          *±¸×¢    £º
 140          **************************************************/
 141          unsigned char GetInitAutoUpdateTime(void)
 142          {
 143   1              return  TKCFG[INIT_AUTO_UPDATE_TIME];
 144   1      }
 145          /**************************************************
 146          *º¯ÊýÃû³Æ£ºunsigned char GetCsFunction(void)
 147          *º¯Êý¹¦ÄÜ£º½øÐÐCS ²âÊÔ
 148          *Èë¿Ú²ÎÊý£ºvoid
 149          *³ö¿Ú²ÎÊý£ºchar SOCAPI_SET_CS_FUNCTION
 150          *±¸×¢    £º
 151          **************************************************/
 152          char GetCsFunction(void)
 153          {
 154   1              return SOCAPI_SET_CS_FUNCTION; 
 155   1      }
 156          /**************************************************
 157          *º¯ÊýÃû³Æ£ºint  GetCurrFingerValue(unsigned char i)
 158          *º¯Êý¹¦ÄÜ£º»ñÈ¡µ±Ç°µÄfinger Öµ
 159          *Èë¿Ú²ÎÊý£ºunsigned char
 160          *³ö¿Ú²ÎÊý£ºint 
 161          *±¸×¢    £º
 162          **************************************************/
 163          unsigned int   GetCurrFingerValue(unsigned char i)
 164          { 
 165   1              return  TKChannelCfg[i][FINGER_THRESHOLD_H]*256+TKChannelCfg[i][FINGER_THRESHOLD_L] ;
 166   1      }
 167          
 168          /**************************************************
 169          *º¯ÊýÃû³Æ£ºunsigned char  GetScanTimeValue(unsigned char i)
 170          *º¯Êý¹¦ÄÜ£º»ñÈ¡µ±Ç°Í¨µÀµÄÉ¨ÃèÊ±¼ä
 171          *Èë¿Ú²ÎÊý£ºunsigned char
 172          *³ö¿Ú²ÎÊý£ºunsigned char 
 173          *±¸×¢    £º
 174          **************************************************/
C51 COMPILER V9.59.0.0   TKDRIVER                                                          01/04/2025 11:59:30 PAGE 4   

 175          unsigned char  GetScanTimeValue(unsigned char i)
 176          { 
 177   1              return TKChannelCfg[i][SCANTIME];         //
 178   1      }
 179          /**************************************************
 180          *º¯ÊýÃû³Æ£ºunsigned char IsDoubleKeyOrSlideKey(void)
 181          *º¯Êý¹¦ÄÜ£º¼ì²âÊÇ·ñÊÇµ¯»É»¬Ìõ»òÕßË«¼ü
 182          *Èë¿Ú²ÎÊý£ºvoid
 183          *³ö¿Ú²ÎÊý£ºunsigned char 
 184          *±¸×¢    £º
 185          **************************************************/
 186          unsigned char IsDoubleKeyOrSlideKey(void)
 187          {
 188   1          return TKCFG[IsDoubleKey];
 189   1      }
 190          /**************************************************
 191          *º¯ÊýÃû³Æ£ºunsigned char  GetBaseLineAdjustValue(unsigned char i)
 192          *º¯Êý¹¦ÄÜ£º»ñÈ¡µ±Ç°Í¨µÀµÄ»ùÏßµ÷Õû
 193          j
 194          *Èë¿Ú²ÎÊý£ºunsigned char
 195          *³ö¿Ú²ÎÊý£ºunsigned char 
 196          *±¸×¢    £º
 197          **************************************************/
 198          unsigned char  GetBaseLineAdjustValue(unsigned char i)
 199          {       
 200   1           return BaseLineAdjusttmp[i]; 
 201   1      }
 202          /**************************************************
 203          *º¯ÊýÃû³Æ£ºunsigned char GetUpConfirmCnt(void)
 204          *º¯Êý¹¦ÄÜ£º¼ì²â°´¼üµ¯Æð´ÎÊý
 205          *Èë¿Ú²ÎÊý£ºvoid
 206          *³ö¿Ú²ÎÊý£º·µ»Ø°´¼üµ¯ÆðÈ·ÈÏ´ÎÊý 
 207          *±¸×¢    £º
 208          **************************************************/
 209          unsigned char GetUpConfirmCnt(void)
 210          {
 211   1              return ConfirmTouchCnt>>1;
 212   1      }
 213          /**************************************************
 214          *º¯ÊýÃû³Æ£ºunsigned char GetTKYzCnt(void)
 215          *º¯Êý¹¦ÄÜ£º»ñÈ¡°´¼üÒÖÖÆÈ·ÈÏ´ÎÊý
 216          *Èë¿Ú²ÎÊý£ºvoid
 217          *³ö¿Ú²ÎÊý£º·µ»ØÒÖÖÆ´ÎÊý 
 218          *±¸×¢    £º
 219          **************************************************/
 220          
 221          unsigned char GetTKYzCnt(void)
 222          {
 223   1              return (ConfirmTouchCnt/3);
 224   1      }
 225          
 226          /**************************************************
 227          *º¯ÊýÃû³Æ£ºint GetTKYzThreshold(unsigned char i)
 228          *º¯Êý¹¦ÄÜ£º»ñÈ¡°´¼üÒÖÖÆÇø¼ä
 229          *Èë¿Ú²ÎÊý£ºunsigned char i
 230          *³ö¿Ú²ÎÊý£º·µ»ØÒÖÖÆÇø¼ä
 231          *±¸×¢    £º
 232          **************************************************/
 233          int GetTKYzThreshold(unsigned char i)
 234          {       
 235   1              unsigned int SetFingerThresholdtmp; 
 236   1              
C51 COMPILER V9.59.0.0   TKDRIVER                                                          01/04/2025 11:59:30 PAGE 5   

 237   1              SetFingerThresholdtmp = GetCurrFingerValue(i); 
 238   1          SetFingerThresholdtmp = SetFingerThresholdtmp*SOCAPI_INHIBITION_ZONE/10;
 239   1      
 240   1              return SetFingerThresholdtmp;
 241   1      }
 242          /**************************************************
 243          *º¯ÊýÃû³Æ£ºvoid CurrentSensorChoose(void)
 244          *º¯Êý¹¦ÄÜ£ºµ±Ç°Í¨µÀÑ¡Ôñ
 245          *Èë¿Ú²ÎÊý£ºvoid
 246          *³ö¿Ú²ÎÊý£ºvoid
 247          *±¸×¢    £º
 248          **************************************************/
 249          void CurrentSensorChoose(void)
 250          {
 251   1              unsigned char  data     i = 0;
 252   1              unsigned char  data     Ctk_Channel_mark = 0;
 253   1      
 254   1         /**************************************************/
 255   1              unsigned long int  data  CurrentSensorKey ;              
 256   1              
 257   1              CurrentSensorKey = SOCAPI_SET_TOUCHKEY_CHANNEL; 
 258   1                      
 259   1              for(i=0;i<31;i++)
 260   1              {
 261   2                      CurrentSensorKey=CurrentSensorKey>>1;
 262   2                      if(TK_CY)
 263   2                      {
 264   3                              CurrentChannel[Ctk_Channel_mark] = i;                                           //Ñ¡Ôñ´¥Ãþµ±Ç°µÄÍ¨µÀ
 265   3                              Ctk_Channel_mark++;
 266   3                              if(Ctk_Channel_mark >= SOCAPI_SET_TOUCHKEY_TOTAL)
 267   3                                      break;
 268   3                      }               
 269   2              }
 270   1              CurrentChannelMax = Ctk_Channel_mark;                                                   //µ±Ç°Ñ¡ÔñµÄ°´¼üÊý 
 271   1      }
 272          
 273          /**************************************************
 274          *º¯ÊýÃû³Æ£ºunsigned char  GetCfgMsg(unsigned char i)
 275          *º¯Êý¹¦ÄÜ£º»ñÈ¡Touch KEY ÅäÖÃÐÅÏ¢
 276          *Èë¿Ú²ÎÊý£ºvoid
 277          *³ö¿Ú²ÎÊý£ºint 
 278          *±¸×¢    £º
 279          **************************************************/
 280          unsigned char  GetCfgMsg(unsigned char i)
 281          {
 282   1              switch(i)
 283   1              { 
 284   2                       case 0:  return TKChannelCfg[0][SET_TOUCH_FREQ];         //0
 285   2                       case 1:  return TKChannelCfg[0][SET_RESOLUTION];         //1
 286   2                       case 2:  return TKChannelCfg[0][SET_GAIN_CFG];           //2           
 287   2                       case 3:  return GetBaseLineAdjustValue(0);//TKChannelCfg[0][SET_GAIN_CFG];
 288   2                       case 4:  return TKCFG[SET_ANTIJAM];                      //10          0
 289   2                       default:return 0;              
 290   2              }
 291   1      }
 292          
 293          /**************************************************
 294          *º¯ÊýÃû³Æ£ºvoid CurrentSensorChoose(void)
 295          *º¯Êý¹¦ÄÜ£º³õÊ¼»¯TK¼Ä´æÆ÷
 296          *Èë¿Ú²ÎÊý£ºvoid
 297          *³ö¿Ú²ÎÊý£ºvoid
 298          *±¸×¢    £º
C51 COMPILER V9.59.0.0   TKDRIVER                                                          01/04/2025 11:59:30 PAGE 6   

 299          **************************************************/
 300          void TouchKeyCFGInit(void)
 301          {
 302   1              unsigned char  data     i;
 303   1              ConfirmTouchCnt = TKCFG[CONFIRMTOUCHCNT];
 304   1              SetNoiseThreshold = TKCFG[NOISE];
 305   1              CurrentSensorChoose(); 
 306   1               for(i=0;i<CurrentChannelMax;i++)
 307   1              {
 308   2                BaseLineAdjusttmp[i] =TKChannelCfg[i][SET_ICHA];;     
 309   2              } 
 310   1              UpdateBaseLNum = 0; 
 311   1      }
 312          
 313          /**************************************************
 314          *º¯ÊýÃû³Æ£ºunsigned int TouchKeyScan(void)
 315          *º¯Êý¹¦ÄÜ£º¼ì²â°´¼ü½Ó¿Ú
 316          *Èë¿Ú²ÎÊý£ºvoid
 317          *³ö¿Ú²ÎÊý£º°´¼üÍ¨µÀ£¬ ·µ»ØµÄÊÇÒ»¸öint , Í¨µÀÊý
 318          *±¸×¢    £º1,  µ÷ÓÃ´¥¿Ø¿â¼ì²âº¯ÊýSensorKeyFlag()
 319                             2,  ·ÖÎöµÃ³ö16¸öÍ¨µÀ£¬ÄÄ¸öÍ¨µÀÓÐ°´ÏÂ£¬°´ÏÂbit Î»ÉèÖÃÎª1£¬·ñÔòÎª0
 320                             3,  ¼ì²âÊÇ·ñÐèÒªÁ¢¼´¸üÐÂbaseline:  ´óÓÚMAX_KEY_RESET_BASELINE ¸ö°´¼ü°´ÏÂÊ±Á¢¼´¸üÐÂbaseline
 321                             4,  Ë«¼ü»òÕßµ¥¼ü°´ÏÂÊ±£¬ Ê±¼ä´óÓÚSetOneKeyPushResetTime()½á¹ûÊ±¸üÐÂbaseline 
 322          **************************************************/
 323          unsigned long int TouchKeyScan(void)
 324          {
 325   1              unsigned char data t;
 326   1          unsigned char data MultipleCnt = 0;//°´¼ü¼ÆÊý
 327   1              unsigned long int data Keyvalue ; 
 328   1              unsigned long int data KeyData = 0;     
 329   1              
 330   1              if(GetIsNeedUpdateBaseline() == 0)                              //¼ì²âÊÇ·ñÐèÒª¸üÐÂbaseline 
 331   1              {
 332   2                      Keyvalue = SensorKeyFlag();                                     //SensorÅÐ¶Ï, ÕâÀïÈç¹ûbMultiple = 1 ±íÊ¾ÖÐ¼äÓÐ¸ÉÈÅ       //·ÖÎö°´¼ü£¬µÃ³ö±ê×¼
             -µÄ16Í¨µÀbit Î»                                                                           
 333   2                      for(t=0;t<CurrentChannelMax;t++)
 334   2                      {
 335   3                              Keyvalue = Keyvalue>>1;
 336   3                              if(TK_CY)
 337   3                              {
 338   4                                      KeyData |= ((unsigned long int)0x01 << (CurrentChannel[t]));              
 339   4                                      MultipleCnt++;                                                  
 340   4                              }
 341   3                      }                
 342   2                      if(MultipleCnt >= 2)                                                                            //½øÈë¶à°´¼ü´¦Àí
 343   2                      {                       
 344   3                              bMultiple = 1;                  
 345   3                              if(MultipleCnt >= SOCAPI_MAX_KEY_NUM_INVALID)
 346   3                              {
 347   4                                      SetNeedUpdateBaseline();                                                        // Á¢¼´¸üÐÂbaseline ,ÀýÈçÑÇ¿ËÁ¦°å¸ÇÉÏÈ¥
 348   4                              }
 349   3                              else
 350   3                              {                                       
 351   4                                      if(IsDoubleKeyOrSlideKey())
 352   4                                      {
 353   5                                              bMultiple = 0;
 354   5                                      }                                
 355   4                              }                       
 356   3                      }                       
 357   2      
 358   2                      if(bMultiple == 0)                                                      //½øÈë°´¼üÅÐ¶Ï
 359   2                      {               
C51 COMPILER V9.59.0.0   TKDRIVER                                                          01/04/2025 11:59:30 PAGE 7   

 360   3                              if(KeyData != 0x0)                                          //µ¥¸ö°´¼ü´ïµ½¶à³¤Ê±¼ä¾Íupdate baseline ,ËÉÊÖ¼ì²â
 361   3                              {                       
 362   4                                      UpdateBaseLNum++; 
 363   4                              }
 364   3                              else    
 365   3                              {
 366   4                                      UpdateBaseLNum = 0;     
 367   4                              } 
 368   3                      }       
 369   2                      else
 370   2                      {   
 371   3                          //¿¼ÂÇ»ùÏß¸üÐÂ              
 372   3                              MultipleLNum++; 
 373   3                              KeyData = 0x00;
 374   3                      }
 375   2      
 376   2                      if(UpdateBaseLNum >= SetOneKeyPushResetTime())    //°´¼ü³¬³ö×î³¤Êä³öÊ±¼ä¸üÐÂ»ùÏß
 377   2                      {
 378   3                              SetNeedUpdateBaseline(); 
 379   3                              UpdateBaseLNum = 0;
 380   3                      }
 381   2                                      
 382   2                      if(MultipleLNum >SOCAPI_MAX_KEY_MUTIPLE)                  //¸ÉÈÅ¼ÆÊý´óÓÚ×î´ó¼ÆÊý¸üÐÂ»ùÏß
 383   2                      {
 384   3                              SetNeedUpdateBaseline(); 
 385   3                              MultipleDealTpye = 1; 
 386   3                              MultipleLNum = 0;
 387   3                      }  
 388   2              }                       
 389   1              else
 390   1              {
 391   2                      MultipleDeal(TKCFG[AUTO_UPDATE_TIME]);                                                                          //»ùÏß¸´Î»´¦Àí
 392   2              }  
 393   1              
 394   1              return KeyData;
 395   1      }
 396          
 397          /**************************************************
 398          *º¯ÊýÃû³Æ£ºvoid CTK_ISR(void) interrupt 11
 399          *º¯Êý¹¦ÄÜ£º´¥ÃþÖÐ¶Ï·þÎñº¯Êý
 400          *Èë¿Ú²ÎÊý£ºvoid
 401          *³ö¿Ú²ÎÊý£ºvoid
 402          *±¸×¢    £º
 403          **************************************************/
 404          void CTK_ISR(void) interrupt    11
 405          {
 406   1         TouchKey_Service();
 407   1      }
 408          
 409          
 410          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    903    ----
   CONSTANT SIZE    =     45    ----
   XDATA SIZE       =     30    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     17    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
C51 COMPILER V9.59.0.0   TKDRIVER                                                          01/04/2025 11:59:30 PAGE 8   

   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
